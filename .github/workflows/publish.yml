name: CI & Publish

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  bump-version-and-publish:
    needs: build-test
    runs-on: ubuntu-latest
    environment: prod-npm
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: "https://registry.npmjs.org/"
          cache: "npm"

      - name: Build project
        run: npm run build

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "latest_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Get commits since last tag
        id: get_commits
        run: |
          if [ "${{ steps.get_tag.outputs.latest_tag }}" = "0.0.0" ]; then
            COMMITS=$(git log HEAD --pretty=format:"%s")
          else
            COMMITS=$(git log ${{ steps.get_tag.outputs.latest_tag }}..HEAD --pretty=format:"%s")
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: version_bump
        run: |
          bump="patch"
          while read -r line; do
            if [[ "$line" =~ \[BREAKING\] ]] || [[ "$line" =~ \[MAJOR\] ]]; then
              bump="major"
              break
            elif [[ "$line" =~ \[FEATURE\] ]] || [[ "$line" =~ \[MINOR\] ]]; then
              bump="minor"
            elif [[ "$line" =~ \[FIX\] ]] || [[ "$line" =~ \[PATCH\] ]]; then
              if [[ "$bump" != "minor" ]]; then
                bump="patch"
              fi
            fi
          done <<< "${{ steps.get_commits.outputs.commits }}"
          echo "bump=$bump" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          npm version ${{ steps.version_bump.outputs.bump }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json || true
          git commit -m "chore(release): bump version to ${{ steps.bump_version.outputs.new_version }}" || exit 0
          git tag v${{ steps.bump_version.outputs.new_version }}
          git push origin HEAD:${GITHUB_REF#refs/heads/}
          git push origin v${{ steps.bump_version.outputs.new_version }}

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public
